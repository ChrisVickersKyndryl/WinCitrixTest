---

  # Services Expected (Expected behaviour: Running) ------------------------------------------------------------------------------------------------
  - name: Query using powershell to get services that should be running
    win_shell: |
      Get-Service -Displayname

      "Citrix Configuration Replication",
      "Citrix Credential Wallet",
      "Citrix Default Domain Services",
      "Citrix Peer Resolution Service",
      "Citrix Service Monitor",
      "Citrix Subscriptions Store",
      "Citrix Telemetry Service"
    register: status_of_services_running


  - name: Write Powershell response to file
    lineinfile:
      path: "/tmp/MyTest/Results.txt"
      line: |
        "Service Status for host '{{ ansible_hostname }}'"
        "{{ status_of_services_running.stdout }}"
        ""
        ""
      insertafter: EOF
    delegate_to: 127.0.0.1
    
  # Services (Expected behaviour: Stopped) ---------------------------------------------------------------------------------------------------------
  - name: Query using powershell to get services that should be stopped
    win_shell: echo 'stopped'
    register: status_of_services_stopped

  - name: Write summary service status to file
    lineinfile:
      path: "/tmp/MyTest/Results.txt"
      line: |
        "Service Status for host '{{ ansible_hostname }}'"
        "{{ status_of_services_running.stdout }}"
        ""
        ""
      insertafter: EOF
    delegate_to: 127.0.0.1

  # Unregistered hosts ------------------------------------------------------------------------------------------------------------------
  - name: Check for unregistered hosts
    win_shell: |
      If ( (Get-PSSnapin -Name Citrix.Broker.Admin.* -ErrorAction SilentlyContinue) -eq $null )
      {
          Try {
              Add-PSSnapin Citrix.Broker.Admin.* | Out-Null
          } Catch {
              Write-Host "Unable to load Citrix Snapin. It is not possible to continue."
              Exit 1
          }
      }
      $VMs = Get-BrokerDesktop -RegistrationState Unregistered -PowerState On
      If ($VMs) {
          Write-Host "Powered-on Unregistered VMs:"
          ForEach ($vm in $VMs) {
              $vm.MachineName
          }
      } Else {
          Write-Host "All the powered-on VMs are registered succcessfully!"
    register: status_unregistered_hosts

  # Write a unregistered hosts to file
  - name: Write summary to file
    lineinfile:
      path: "/tmp/MyTest/Results.txt"
      line: |
        "Unregistered hosts output '{{ ansible_hostname }}'"
        "{{ status_unregistered_hosts.stdout }}"
        ""
        ""
      insertafter: EOF
    delegate_to: 127.0.0.1

  # Write summary to file if any value is not correct ---------------------------------------------------------------------------------
  - name: Write detailed results to temporary file
    copy: 
      content: "Error found"
      dest: "/tmp/MyTest/Summary.txt"
    delegate_to: 127.0.0.1
    when: |
      status_of_services_running is search("stopped")
      or
      ((status_of_services_stopped.stdout|regex_findall('stopped')|length) != 2)
      or
      "All the powered-on VMs are registered succcessfully!" not in status_unregistered_hosts.stdout
